// tslint:disable
/**
 * Semux
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import url from "url";
import fetch from "unfetch";
const portableFetch = fetch;
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:5171";

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountType
 */
export interface AccountType {
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    address?: string;
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    available?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    locked?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    nonce?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    transactionCount?: number;
}

/**
 * 
 * @export
 * @interface AddNodeResponse
 */
export interface AddNodeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AddNodeResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddNodeResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface ApiHandlerResponse
 */
export interface ApiHandlerResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ApiHandlerResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiHandlerResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface BlockType
 */
export interface BlockType {
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    hash?: string;
    /**
     * 
     * @type {number}
     * @memberof BlockType
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof BlockType
     */
    view?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    coinbase?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    parentHash?: string;
    /**
     * 
     * @type {number}
     * @memberof BlockType
     */
    timestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    transactionsRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    resultsRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    stateRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    data?: string;
    /**
     * 
     * @type {Array&lt;TransactionType&gt;}
     * @memberof BlockType
     */
    transactions?: Array<TransactionType>;
}

/**
 * 
 * @export
 * @interface CreateAccountResponse
 */
export interface CreateAccountResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateAccountResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    result?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface DelegateType
 */
export interface DelegateType {
    /**
     * 
     * @type {string}
     * @memberof DelegateType
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof DelegateType
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof DelegateType
     */
    registeredAt?: number;
    /**
     * 
     * @type {number}
     * @memberof DelegateType
     */
    votes?: number;
    /**
     * 
     * @type {number}
     * @memberof DelegateType
     */
    blocksForged?: number;
    /**
     * 
     * @type {number}
     * @memberof DelegateType
     */
    turnsHit?: number;
    /**
     * 
     * @type {number}
     * @memberof DelegateType
     */
    turnsMissed?: number;
}

/**
 * 
 * @export
 * @interface DoTransactionResponse
 */
export interface DoTransactionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DoTransactionResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof DoTransactionResponse
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof DoTransactionResponse
     */
    result?: string;
}

/**
 * 
 * @export
 * @interface GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetAccountResponse
     */
    success: boolean;
    /**
     * 
     * @type {AccountType}
     * @memberof GetAccountResponse
     */
    result?: AccountType;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetAccountTransactionsResponse
 */
export interface GetAccountTransactionsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetAccountTransactionsResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array&lt;TransactionType&gt;}
     * @memberof GetAccountTransactionsResponse
     */
    result?: Array<TransactionType>;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetBlockResponse
 */
export interface GetBlockResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetBlockResponse
     */
    success: boolean;
    /**
     * 
     * @type {BlockType}
     * @memberof GetBlockResponse
     */
    result?: BlockType;
    /**
     * 
     * @type {string}
     * @memberof GetBlockResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetDelegateResponse
 */
export interface GetDelegateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDelegateResponse
     */
    success: boolean;
    /**
     * 
     * @type {DelegateType}
     * @memberof GetDelegateResponse
     */
    result?: DelegateType;
    /**
     * 
     * @type {string}
     * @memberof GetDelegateResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetDelegatesResponse
 */
export interface GetDelegatesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDelegatesResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array&lt;DelegateType&gt;}
     * @memberof GetDelegatesResponse
     */
    result?: Array<DelegateType>;
    /**
     * 
     * @type {string}
     * @memberof GetDelegatesResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetInfoResponse
 */
export interface GetInfoResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetInfoResponse
     */
    success: boolean;
    /**
     * 
     * @type {InfoType}
     * @memberof GetInfoResponse
     */
    result?: InfoType;
    /**
     * 
     * @type {string}
     * @memberof GetInfoResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetLatestBlockNumberResponse
 */
export interface GetLatestBlockNumberResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetLatestBlockNumberResponse
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetLatestBlockNumberResponse
     */
    result?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLatestBlockNumberResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetLatestBlockResponse
 */
export interface GetLatestBlockResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetLatestBlockResponse
     */
    success: boolean;
    /**
     * 
     * @type {BlockType}
     * @memberof GetLatestBlockResponse
     */
    result?: BlockType;
    /**
     * 
     * @type {string}
     * @memberof GetLatestBlockResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetPeersResponse
 */
export interface GetPeersResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetPeersResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array&lt;PeerType&gt;}
     * @memberof GetPeersResponse
     */
    result?: Array<PeerType>;
    /**
     * 
     * @type {string}
     * @memberof GetPeersResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetPendingTransactionsResponse
 */
export interface GetPendingTransactionsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetPendingTransactionsResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array&lt;TransactionType&gt;}
     * @memberof GetPendingTransactionsResponse
     */
    result?: Array<TransactionType>;
    /**
     * 
     * @type {string}
     * @memberof GetPendingTransactionsResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetTransactionLimitsResponse
 */
export interface GetTransactionLimitsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetTransactionLimitsResponse
     */
    success: boolean;
    /**
     * 
     * @type {TransactionLimitsType}
     * @memberof GetTransactionLimitsResponse
     */
    result?: TransactionLimitsType;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionLimitsResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetTransactionResponse
 */
export interface GetTransactionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetTransactionResponse
     */
    success: boolean;
    /**
     * 
     * @type {TransactionType}
     * @memberof GetTransactionResponse
     */
    result?: TransactionType;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetValidatorsResponse
 */
export interface GetValidatorsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetValidatorsResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof GetValidatorsResponse
     */
    result?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetValidatorsResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetVoteResponse
 */
export interface GetVoteResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetVoteResponse
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetVoteResponse
     */
    result?: number;
    /**
     * 
     * @type {string}
     * @memberof GetVoteResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface GetVotesResponse
 */
export interface GetVotesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetVotesResponse
     */
    success: boolean;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetVotesResponse
     */
    result?: { [key: string]: number; };
    /**
     * 
     * @type {string}
     * @memberof GetVotesResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface InfoType
 */
export interface InfoType {
    /**
     * 
     * @type {string}
     * @memberof InfoType
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoType
     */
    coinbase?: string;
    /**
     * 
     * @type {number}
     * @memberof InfoType
     */
    latestBlockNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof InfoType
     */
    latestBlockHash?: string;
    /**
     * 
     * @type {number}
     * @memberof InfoType
     */
    activePeers?: number;
    /**
     * 
     * @type {number}
     * @memberof InfoType
     */
    pendingTransactions?: number;
}

/**
 * 
 * @export
 * @interface ListAccountsResponse
 */
export interface ListAccountsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ListAccountsResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof ListAccountsResponse
     */
    result?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ListAccountsResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface PeerType
 */
export interface PeerType {
    /**
     * 
     * @type {string}
     * @memberof PeerType
     */
    ip?: string;
    /**
     * 
     * @type {number}
     * @memberof PeerType
     */
    port?: number;
    /**
     * 
     * @type {number}
     * @memberof PeerType
     */
    networkVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof PeerType
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof PeerType
     */
    peerId?: string;
    /**
     * 
     * @type {number}
     * @memberof PeerType
     */
    latestBlockNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof PeerType
     */
    latency?: number;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof PeerType
     */
    capabilities?: Array<string>;
}

/**
 * 
 * @export
 * @interface SendTransactionResponse
 */
export interface SendTransactionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SendTransactionResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof SendTransactionResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface SignMessageResponse
 */
export interface SignMessageResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SignMessageResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof SignMessageResponse
     */
    result?: string;
    /**
     * 
     * @type {string}
     * @memberof SignMessageResponse
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface TransactionLimitsType
 */
export interface TransactionLimitsType {
    /**
     * 
     * @type {number}
     * @memberof TransactionLimitsType
     */
    maxTransactionDataSize?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionLimitsType
     */
    minTransactionFee?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionLimitsType
     */
    minDelegateBurnAmount?: number;
}

/**
 * 
 * @export
 * @interface TransactionType
 */
export interface TransactionType {
    /**
     * 
     * @type {number}
     * @memberof TransactionType
     */
    blockNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionType
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionType
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionType
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionType
     */
    to?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionType
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionType
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionType
     */
    nonce?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionType
     */
    timestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionType
     */
    data?: string;
}

/**
 * 
 * @export
 * @interface VerifyMessageResponse
 */
export interface VerifyMessageResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyMessageResponse
     */
    success: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyMessageResponse
     */
    result?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyMessageResponse
     */
    message?: string;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a node to node manager.
         * @summary Add node
         * @param {string} node Name of the node in host:port format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(node: string, options: any = {}): FetchArgs {
            // verify required parameter 'node' is not null or undefined
            if (node === null || node === undefined) {
                throw new RequiredError('node','Required parameter node was null or undefined when calling addNode.');
            }
            const localVarPath = `/add_node`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (node !== undefined) {
                localVarQueryParameter['node'] = node;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an IP address to blacklist.
         * @summary Add to blacklist
         * @param {string} ip IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToBlacklist(ip: string, options: any = {}): FetchArgs {
            // verify required parameter 'ip' is not null or undefined
            if (ip === null || ip === undefined) {
                throw new RequiredError('ip','Required parameter ip was null or undefined when calling addToBlacklist.');
            }
            const localVarPath = `/add_to_blacklist`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an IP address to whitelist.
         * @summary Add to whitelist
         * @param {string} ip IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToWhitelist(ip: string, options: any = {}): FetchArgs {
            // verify required parameter 'ip' is not null or undefined
            if (ip === null || ip === undefined) {
                throw new RequiredError('ip','Required parameter ip was null or undefined when calling addToWhitelist.');
            }
            const localVarPath = `/add_to_whitelist`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new account.
         * @summary Create account
         * @param {string} [name] Assigned alias to the created account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(name?: string, options: any = {}): FetchArgs {
            const localVarPath = `/create_account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an account.
         * @summary Get account
         * @param {string} address Address of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(address: string, options: any = {}): FetchArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAccount.');
            }
            const localVarPath = `/get_account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns transactions from/to an account.
         * @summary Get account transactions
         * @param {string} address Address of account
         * @param {string} from Starting range of transactions
         * @param {string} to Ending range of transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(address: string, from: string, to: string, options: any = {}): FetchArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAccountTransactions.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling getAccountTransactions.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling getAccountTransactions.');
            }
            const localVarPath = `/get_account_transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a block.
         * @summary Get block
         * @param {number} number Block number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock(number: number, options: any = {}): FetchArgs {
            // verify required parameter 'number' is not null or undefined
            if (number === null || number === undefined) {
                throw new RequiredError('number','Required parameter number was null or undefined when calling getBlock.');
            }
            const localVarPath = `/get_block`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a delegate.
         * @summary Get a delegate
         * @param {string} address Delegate address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelegate(address: string, options: any = {}): FetchArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getDelegate.');
            }
            const localVarPath = `/get_delegate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of delegates.
         * @summary Get all delegates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelegates(options: any = {}): FetchArgs {
            const localVarPath = `/get_delegates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns kernel info.
         * @summary Get info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(options: any = {}): FetchArgs {
            const localVarPath = `/get_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the latest block.
         * @summary Get latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock(options: any = {}): FetchArgs {
            const localVarPath = `/get_latest_block`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the number of the latest block.
         * @summary Get latest block number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlockNumber(options: any = {}): FetchArgs {
            const localVarPath = `/get_latest_block_number`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns connected peers.
         * @summary Get peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers(options: any = {}): FetchArgs {
            const localVarPath = `/get_peers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the pending transactions.
         * @summary Get pending transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTransactions(options: any = {}): FetchArgs {
            const localVarPath = `/get_pending_transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transactions if exists.
         * @summary Get transaction
         * @param {string} hash Transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(hash: string, options: any = {}): FetchArgs {
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError('hash','Required parameter hash was null or undefined when calling getTransaction.');
            }
            const localVarPath = `/get_transaction`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get minimum fee and maximum size.
         * @summary Get transaction limits
         * @param {string} type Type of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionLimits(type: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getTransactionLimits.');
            }
            const localVarPath = `/get_transaction_limits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of validators.
         * @summary Get validators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidators(options: any = {}): FetchArgs {
            const localVarPath = `/get_validators`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the vote from a voter to a delegate.
         * @summary Get vote
         * @param {string} delegate Delegate address
         * @param {string} voter Voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVote(delegate: string, voter: string, options: any = {}): FetchArgs {
            // verify required parameter 'delegate' is not null or undefined
            if (delegate === null || delegate === undefined) {
                throw new RequiredError('delegate','Required parameter delegate was null or undefined when calling getVote.');
            }
            // verify required parameter 'voter' is not null or undefined
            if (voter === null || voter === undefined) {
                throw new RequiredError('voter','Required parameter voter was null or undefined when calling getVote.');
            }
            const localVarPath = `/get_vote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (delegate !== undefined) {
                localVarQueryParameter['delegate'] = delegate;
            }

            if (voter !== undefined) {
                localVarQueryParameter['voter'] = voter;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the votes to a delegate
         * @summary Get votes
         * @param {string} delegate Delegate address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotes(delegate: string, options: any = {}): FetchArgs {
            // verify required parameter 'delegate' is not null or undefined
            if (delegate === null || delegate === undefined) {
                throw new RequiredError('delegate','Required parameter delegate was null or undefined when calling getVotes.');
            }
            const localVarPath = `/get_votes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (delegate !== undefined) {
                localVarQueryParameter['delegate'] = delegate;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns accounts in the wallet.
         * @summary List accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(options: any = {}): FetchArgs {
            const localVarPath = `/list_accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers as a delegate
         * @summary Register delegate
         * @param {string} from Registering address
         * @param {string} fee Transaction fee
         * @param {string} data Delegate name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDelegate(from: string, fee: string, data: string, options: any = {}): FetchArgs {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling registerDelegate.');
            }
            // verify required parameter 'fee' is not null or undefined
            if (fee === null || fee === undefined) {
                throw new RequiredError('fee','Required parameter fee was null or undefined when calling registerDelegate.');
            }
            // verify required parameter 'data' is not null or undefined
            if (data === null || data === undefined) {
                throw new RequiredError('data','Required parameter data was null or undefined when calling registerDelegate.');
            }
            const localVarPath = `/delegate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (fee !== undefined) {
                localVarQueryParameter['fee'] = fee;
            }

            if (data !== undefined) {
                localVarQueryParameter['data'] = data;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Broadcasts a raw transaction to the network.
         * @summary Send a raw transaction
         * @param {string} raw Raw transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTransaction(raw: string, options: any = {}): FetchArgs {
            // verify required parameter 'raw' is not null or undefined
            if (raw === null || raw === undefined) {
                throw new RequiredError('raw','Required parameter raw was null or undefined when calling sendTransaction.');
            }
            const localVarPath = `/send_transaction`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign a message.
         * @summary Sign a message
         * @param {string} address Signing address
         * @param {string} message Message to sign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessage(address: string, message: string, options: any = {}): FetchArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling signMessage.');
            }
            // verify required parameter 'message' is not null or undefined
            if (message === null || message === undefined) {
                throw new RequiredError('message','Required parameter message was null or undefined when calling signMessage.');
            }
            const localVarPath = `/sign_message`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers coins to another address.
         * @summary Transfer coins
         * @param {string} value Amount of SEM to transfer
         * @param {string} from Sending address
         * @param {string} to Receiving address
         * @param {string} fee Transaction fee
         * @param {string} data Transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(value: string, from: string, to: string, fee: string, data: string, options: any = {}): FetchArgs {
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling transfer.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling transfer.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling transfer.');
            }
            // verify required parameter 'fee' is not null or undefined
            if (fee === null || fee === undefined) {
                throw new RequiredError('fee','Required parameter fee was null or undefined when calling transfer.');
            }
            // verify required parameter 'data' is not null or undefined
            if (data === null || data === undefined) {
                throw new RequiredError('data','Required parameter data was null or undefined when calling transfer.');
            }
            const localVarPath = `/transfer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (fee !== undefined) {
                localVarQueryParameter['fee'] = fee;
            }

            if (data !== undefined) {
                localVarQueryParameter['data'] = data;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unvotes for a delegate.
         * @summary Unvote
         * @param {string} from Voting address
         * @param {string} to Delegate address
         * @param {string} value Vote amount
         * @param {string} fee Transaction fee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unvote(from: string, to: string, value: string, fee: string, options: any = {}): FetchArgs {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling unvote.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling unvote.');
            }
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling unvote.');
            }
            // verify required parameter 'fee' is not null or undefined
            if (fee === null || fee === undefined) {
                throw new RequiredError('fee','Required parameter fee was null or undefined when calling unvote.');
            }
            const localVarPath = `/unvote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (fee !== undefined) {
                localVarQueryParameter['fee'] = fee;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a signed message.
         * @summary Verify a message
         * @param {string} address Address
         * @param {string} message Message
         * @param {string} signature Signature to verify
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMessage(address: string, message: string, signature: string, options: any = {}): FetchArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling verifyMessage.');
            }
            // verify required parameter 'message' is not null or undefined
            if (message === null || message === undefined) {
                throw new RequiredError('message','Required parameter message was null or undefined when calling verifyMessage.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling verifyMessage.');
            }
            const localVarPath = `/verify_message`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Votes for a delegate.
         * @summary Vote
         * @param {string} from Voting address
         * @param {string} to Delegate address
         * @param {string} value Vote amount
         * @param {string} fee Transaction fee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote(from: string, to: string, value: string, fee: string, options: any = {}): FetchArgs {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling vote.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling vote.');
            }
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling vote.');
            }
            // verify required parameter 'fee' is not null or undefined
            if (fee === null || fee === undefined) {
                throw new RequiredError('fee','Required parameter fee was null or undefined when calling vote.');
            }
            const localVarPath = `/vote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (fee !== undefined) {
                localVarQueryParameter['fee'] = fee;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a node to node manager.
         * @summary Add node
         * @param {string} node Name of the node in host:port format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(node: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddNodeResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addNode(node, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds an IP address to blacklist.
         * @summary Add to blacklist
         * @param {string} ip IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToBlacklist(ip: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiHandlerResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addToBlacklist(ip, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds an IP address to whitelist.
         * @summary Add to whitelist
         * @param {string} ip IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToWhitelist(ip: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiHandlerResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addToWhitelist(ip, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a new account.
         * @summary Create account
         * @param {string} [name] Assigned alias to the created account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(name?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateAccountResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createAccount(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns an account.
         * @summary Get account
         * @param {string} address Address of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccountResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getAccount(address, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns transactions from/to an account.
         * @summary Get account transactions
         * @param {string} address Address of account
         * @param {string} from Starting range of transactions
         * @param {string} to Ending range of transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(address: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccountTransactionsResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getAccountTransactions(address, from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a block.
         * @summary Get block
         * @param {number} number Block number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock(number: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetBlockResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getBlock(number, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a delegate.
         * @summary Get a delegate
         * @param {string} address Delegate address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelegate(address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetDelegateResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getDelegate(address, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of delegates.
         * @summary Get all delegates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelegates(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetDelegatesResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getDelegates(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns kernel info.
         * @summary Get info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetInfoResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getInfo(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the latest block.
         * @summary Get latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetLatestBlockResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getLatestBlock(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the number of the latest block.
         * @summary Get latest block number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlockNumber(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetLatestBlockNumberResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getLatestBlockNumber(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns connected peers.
         * @summary Get peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPeersResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPeers(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all the pending transactions.
         * @summary Get pending transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTransactions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPendingTransactionsResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPendingTransactions(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a transactions if exists.
         * @summary Get transaction
         * @param {string} hash Transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(hash: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTransactionResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTransaction(hash, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get minimum fee and maximum size.
         * @summary Get transaction limits
         * @param {string} type Type of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionLimits(type: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTransactionLimitsResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTransactionLimits(type, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of validators.
         * @summary Get validators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidators(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetValidatorsResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getValidators(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the vote from a voter to a delegate.
         * @summary Get vote
         * @param {string} delegate Delegate address
         * @param {string} voter Voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVote(delegate: string, voter: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetVoteResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getVote(delegate, voter, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all the votes to a delegate
         * @summary Get votes
         * @param {string} delegate Delegate address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotes(delegate: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetVotesResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getVotes(delegate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns accounts in the wallet.
         * @summary List accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListAccountsResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).listAccounts(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Registers as a delegate
         * @summary Register delegate
         * @param {string} from Registering address
         * @param {string} fee Transaction fee
         * @param {string} data Delegate name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDelegate(from: string, fee: string, data: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).registerDelegate(from, fee, data, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Broadcasts a raw transaction to the network.
         * @summary Send a raw transaction
         * @param {string} raw Raw transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTransaction(raw: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SendTransactionResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendTransaction(raw, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sign a message.
         * @summary Sign a message
         * @param {string} address Signing address
         * @param {string} message Message to sign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessage(address: string, message: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignMessageResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).signMessage(address, message, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfers coins to another address.
         * @summary Transfer coins
         * @param {string} value Amount of SEM to transfer
         * @param {string} from Sending address
         * @param {string} to Receiving address
         * @param {string} fee Transaction fee
         * @param {string} data Transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(value: string, from: string, to: string, fee: string, data: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).transfer(value, from, to, fee, data, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Unvotes for a delegate.
         * @summary Unvote
         * @param {string} from Voting address
         * @param {string} to Delegate address
         * @param {string} value Vote amount
         * @param {string} fee Transaction fee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unvote(from: string, to: string, value: string, fee: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).unvote(from, to, value, fee, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Verify a signed message.
         * @summary Verify a message
         * @param {string} address Address
         * @param {string} message Message
         * @param {string} signature Signature to verify
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMessage(address: string, message: string, signature: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerifyMessageResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).verifyMessage(address, message, signature, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Votes for a delegate.
         * @summary Vote
         * @param {string} from Voting address
         * @param {string} to Delegate address
         * @param {string} value Vote amount
         * @param {string} fee Transaction fee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote(from: string, to: string, value: string, fee: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).vote(from, to, value, fee, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Adds a node to node manager.
         * @summary Add node
         * @param {string} node Name of the node in host:port format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(node: string, options?: any) {
            return DefaultApiFp(configuration).addNode(node, options)(fetch, basePath);
        },
        /**
         * Adds an IP address to blacklist.
         * @summary Add to blacklist
         * @param {string} ip IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToBlacklist(ip: string, options?: any) {
            return DefaultApiFp(configuration).addToBlacklist(ip, options)(fetch, basePath);
        },
        /**
         * Adds an IP address to whitelist.
         * @summary Add to whitelist
         * @param {string} ip IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToWhitelist(ip: string, options?: any) {
            return DefaultApiFp(configuration).addToWhitelist(ip, options)(fetch, basePath);
        },
        /**
         * Creates a new account.
         * @summary Create account
         * @param {string} [name] Assigned alias to the created account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(name?: string, options?: any) {
            return DefaultApiFp(configuration).createAccount(name, options)(fetch, basePath);
        },
        /**
         * Returns an account.
         * @summary Get account
         * @param {string} address Address of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(address: string, options?: any) {
            return DefaultApiFp(configuration).getAccount(address, options)(fetch, basePath);
        },
        /**
         * Returns transactions from/to an account.
         * @summary Get account transactions
         * @param {string} address Address of account
         * @param {string} from Starting range of transactions
         * @param {string} to Ending range of transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(address: string, from: string, to: string, options?: any) {
            return DefaultApiFp(configuration).getAccountTransactions(address, from, to, options)(fetch, basePath);
        },
        /**
         * Returns a block.
         * @summary Get block
         * @param {number} number Block number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock(number: number, options?: any) {
            return DefaultApiFp(configuration).getBlock(number, options)(fetch, basePath);
        },
        /**
         * Returns a delegate.
         * @summary Get a delegate
         * @param {string} address Delegate address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelegate(address: string, options?: any) {
            return DefaultApiFp(configuration).getDelegate(address, options)(fetch, basePath);
        },
        /**
         * Returns a list of delegates.
         * @summary Get all delegates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelegates(options?: any) {
            return DefaultApiFp(configuration).getDelegates(options)(fetch, basePath);
        },
        /**
         * Returns kernel info.
         * @summary Get info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(options?: any) {
            return DefaultApiFp(configuration).getInfo(options)(fetch, basePath);
        },
        /**
         * Returns the latest block.
         * @summary Get latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock(options?: any) {
            return DefaultApiFp(configuration).getLatestBlock(options)(fetch, basePath);
        },
        /**
         * Returns the number of the latest block.
         * @summary Get latest block number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlockNumber(options?: any) {
            return DefaultApiFp(configuration).getLatestBlockNumber(options)(fetch, basePath);
        },
        /**
         * Returns connected peers.
         * @summary Get peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers(options?: any) {
            return DefaultApiFp(configuration).getPeers(options)(fetch, basePath);
        },
        /**
         * Returns all the pending transactions.
         * @summary Get pending transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTransactions(options?: any) {
            return DefaultApiFp(configuration).getPendingTransactions(options)(fetch, basePath);
        },
        /**
         * Returns a transactions if exists.
         * @summary Get transaction
         * @param {string} hash Transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(hash: string, options?: any) {
            return DefaultApiFp(configuration).getTransaction(hash, options)(fetch, basePath);
        },
        /**
         * Get minimum fee and maximum size.
         * @summary Get transaction limits
         * @param {string} type Type of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionLimits(type: string, options?: any) {
            return DefaultApiFp(configuration).getTransactionLimits(type, options)(fetch, basePath);
        },
        /**
         * Returns a list of validators.
         * @summary Get validators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidators(options?: any) {
            return DefaultApiFp(configuration).getValidators(options)(fetch, basePath);
        },
        /**
         * Returns the vote from a voter to a delegate.
         * @summary Get vote
         * @param {string} delegate Delegate address
         * @param {string} voter Voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVote(delegate: string, voter: string, options?: any) {
            return DefaultApiFp(configuration).getVote(delegate, voter, options)(fetch, basePath);
        },
        /**
         * Returns all the votes to a delegate
         * @summary Get votes
         * @param {string} delegate Delegate address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotes(delegate: string, options?: any) {
            return DefaultApiFp(configuration).getVotes(delegate, options)(fetch, basePath);
        },
        /**
         * Returns accounts in the wallet.
         * @summary List accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(options?: any) {
            return DefaultApiFp(configuration).listAccounts(options)(fetch, basePath);
        },
        /**
         * Registers as a delegate
         * @summary Register delegate
         * @param {string} from Registering address
         * @param {string} fee Transaction fee
         * @param {string} data Delegate name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDelegate(from: string, fee: string, data: string, options?: any) {
            return DefaultApiFp(configuration).registerDelegate(from, fee, data, options)(fetch, basePath);
        },
        /**
         * Broadcasts a raw transaction to the network.
         * @summary Send a raw transaction
         * @param {string} raw Raw transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTransaction(raw: string, options?: any) {
            return DefaultApiFp(configuration).sendTransaction(raw, options)(fetch, basePath);
        },
        /**
         * Sign a message.
         * @summary Sign a message
         * @param {string} address Signing address
         * @param {string} message Message to sign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessage(address: string, message: string, options?: any) {
            return DefaultApiFp(configuration).signMessage(address, message, options)(fetch, basePath);
        },
        /**
         * Transfers coins to another address.
         * @summary Transfer coins
         * @param {string} value Amount of SEM to transfer
         * @param {string} from Sending address
         * @param {string} to Receiving address
         * @param {string} fee Transaction fee
         * @param {string} data Transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(value: string, from: string, to: string, fee: string, data: string, options?: any) {
            return DefaultApiFp(configuration).transfer(value, from, to, fee, data, options)(fetch, basePath);
        },
        /**
         * Unvotes for a delegate.
         * @summary Unvote
         * @param {string} from Voting address
         * @param {string} to Delegate address
         * @param {string} value Vote amount
         * @param {string} fee Transaction fee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unvote(from: string, to: string, value: string, fee: string, options?: any) {
            return DefaultApiFp(configuration).unvote(from, to, value, fee, options)(fetch, basePath);
        },
        /**
         * Verify a signed message.
         * @summary Verify a message
         * @param {string} address Address
         * @param {string} message Message
         * @param {string} signature Signature to verify
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMessage(address: string, message: string, signature: string, options?: any) {
            return DefaultApiFp(configuration).verifyMessage(address, message, signature, options)(fetch, basePath);
        },
        /**
         * Votes for a delegate.
         * @summary Vote
         * @param {string} from Voting address
         * @param {string} to Delegate address
         * @param {string} value Vote amount
         * @param {string} fee Transaction fee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote(from: string, to: string, value: string, fee: string, options?: any) {
            return DefaultApiFp(configuration).vote(from, to, value, fee, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Adds a node to node manager.
     * @summary Add node
     * @param {} node Name of the node in host:port format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addNode(node: string, options?: any) {
        return DefaultApiFp(this.configuration).addNode(node, options)(this.fetch, this.basePath);
    }

    /**
     * Adds an IP address to blacklist.
     * @summary Add to blacklist
     * @param {} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addToBlacklist(ip: string, options?: any) {
        return DefaultApiFp(this.configuration).addToBlacklist(ip, options)(this.fetch, this.basePath);
    }

    /**
     * Adds an IP address to whitelist.
     * @summary Add to whitelist
     * @param {} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addToWhitelist(ip: string, options?: any) {
        return DefaultApiFp(this.configuration).addToWhitelist(ip, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a new account.
     * @summary Create account
     * @param {} [name] Assigned alias to the created account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAccount(name?: string, options?: any) {
        return DefaultApiFp(this.configuration).createAccount(name, options)(this.fetch, this.basePath);
    }

    /**
     * Returns an account.
     * @summary Get account
     * @param {} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccount(address: string, options?: any) {
        return DefaultApiFp(this.configuration).getAccount(address, options)(this.fetch, this.basePath);
    }

    /**
     * Returns transactions from/to an account.
     * @summary Get account transactions
     * @param {} address Address of account
     * @param {} from Starting range of transactions
     * @param {} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccountTransactions(address: string, from: string, to: string, options?: any) {
        return DefaultApiFp(this.configuration).getAccountTransactions(address, from, to, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a block.
     * @summary Get block
     * @param {} number Block number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBlock(number: number, options?: any) {
        return DefaultApiFp(this.configuration).getBlock(number, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a delegate.
     * @summary Get a delegate
     * @param {} address Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDelegate(address: string, options?: any) {
        return DefaultApiFp(this.configuration).getDelegate(address, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of delegates.
     * @summary Get all delegates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDelegates(options?: any) {
        return DefaultApiFp(this.configuration).getDelegates(options)(this.fetch, this.basePath);
    }

    /**
     * Returns kernel info.
     * @summary Get info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInfo(options?: any) {
        return DefaultApiFp(this.configuration).getInfo(options)(this.fetch, this.basePath);
    }

    /**
     * Returns the latest block.
     * @summary Get latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLatestBlock(options?: any) {
        return DefaultApiFp(this.configuration).getLatestBlock(options)(this.fetch, this.basePath);
    }

    /**
     * Returns the number of the latest block.
     * @summary Get latest block number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLatestBlockNumber(options?: any) {
        return DefaultApiFp(this.configuration).getLatestBlockNumber(options)(this.fetch, this.basePath);
    }

    /**
     * Returns connected peers.
     * @summary Get peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeers(options?: any) {
        return DefaultApiFp(this.configuration).getPeers(options)(this.fetch, this.basePath);
    }

    /**
     * Returns all the pending transactions.
     * @summary Get pending transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPendingTransactions(options?: any) {
        return DefaultApiFp(this.configuration).getPendingTransactions(options)(this.fetch, this.basePath);
    }

    /**
     * Returns a transactions if exists.
     * @summary Get transaction
     * @param {} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransaction(hash: string, options?: any) {
        return DefaultApiFp(this.configuration).getTransaction(hash, options)(this.fetch, this.basePath);
    }

    /**
     * Get minimum fee and maximum size.
     * @summary Get transaction limits
     * @param {} type Type of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransactionLimits(type: string, options?: any) {
        return DefaultApiFp(this.configuration).getTransactionLimits(type, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of validators.
     * @summary Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getValidators(options?: any) {
        return DefaultApiFp(this.configuration).getValidators(options)(this.fetch, this.basePath);
    }

    /**
     * Returns the vote from a voter to a delegate.
     * @summary Get vote
     * @param {} delegate Delegate address
     * @param {} voter Voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVote(delegate: string, voter: string, options?: any) {
        return DefaultApiFp(this.configuration).getVote(delegate, voter, options)(this.fetch, this.basePath);
    }

    /**
     * Returns all the votes to a delegate
     * @summary Get votes
     * @param {} delegate Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVotes(delegate: string, options?: any) {
        return DefaultApiFp(this.configuration).getVotes(delegate, options)(this.fetch, this.basePath);
    }

    /**
     * Returns accounts in the wallet.
     * @summary List accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAccounts(options?: any) {
        return DefaultApiFp(this.configuration).listAccounts(options)(this.fetch, this.basePath);
    }

    /**
     * Registers as a delegate
     * @summary Register delegate
     * @param {} from Registering address
     * @param {} fee Transaction fee
     * @param {} data Delegate name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerDelegate(from: string, fee: string, data: string, options?: any) {
        return DefaultApiFp(this.configuration).registerDelegate(from, fee, data, options)(this.fetch, this.basePath);
    }

    /**
     * Broadcasts a raw transaction to the network.
     * @summary Send a raw transaction
     * @param {} raw Raw transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendTransaction(raw: string, options?: any) {
        return DefaultApiFp(this.configuration).sendTransaction(raw, options)(this.fetch, this.basePath);
    }

    /**
     * Sign a message.
     * @summary Sign a message
     * @param {} address Signing address
     * @param {} message Message to sign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signMessage(address: string, message: string, options?: any) {
        return DefaultApiFp(this.configuration).signMessage(address, message, options)(this.fetch, this.basePath);
    }

    /**
     * Transfers coins to another address.
     * @summary Transfer coins
     * @param {} value Amount of SEM to transfer
     * @param {} from Sending address
     * @param {} to Receiving address
     * @param {} fee Transaction fee
     * @param {} data Transaction data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transfer(value: string, from: string, to: string, fee: string, data: string, options?: any) {
        return DefaultApiFp(this.configuration).transfer(value, from, to, fee, data, options)(this.fetch, this.basePath);
    }

    /**
     * Unvotes for a delegate.
     * @summary Unvote
     * @param {} from Voting address
     * @param {} to Delegate address
     * @param {} value Vote amount
     * @param {} fee Transaction fee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unvote(from: string, to: string, value: string, fee: string, options?: any) {
        return DefaultApiFp(this.configuration).unvote(from, to, value, fee, options)(this.fetch, this.basePath);
    }

    /**
     * Verify a signed message.
     * @summary Verify a message
     * @param {} address Address
     * @param {} message Message
     * @param {} signature Signature to verify
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyMessage(address: string, message: string, signature: string, options?: any) {
        return DefaultApiFp(this.configuration).verifyMessage(address, message, signature, options)(this.fetch, this.basePath);
    }

    /**
     * Votes for a delegate.
     * @summary Vote
     * @param {} from Voting address
     * @param {} to Delegate address
     * @param {} value Vote amount
     * @param {} fee Transaction fee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vote(from: string, to: string, value: string, fee: string, options?: any) {
        return DefaultApiFp(this.configuration).vote(from, to, value, fee, options)(this.fetch, this.basePath);
    }

}

