{"version":3,"file":"index.js","sources":["../../lib/api/api.spec.ts"],"sourcesContent":["import Transaction from \"../Transaction\";\nimport TransactionType from \"../TransactionType\";\nimport Network from \"../Network\";\nimport * as API from \"./api\";\nimport {Configuration} from \"./configuration\";\nimport chai from 'chai';\nimport { Buffer } from \"buffer\";\nimport Long from \"long\";\nimport Key from \"../Key\";\n\nconst DEV_KEY = Key.importEncodedPrivateKey(Buffer.from(\n  \"302e020100300506032b657004220420acbd5f2cb2b6053f704376d12df99f2aa163d267a755c7f1d9fe55d2a2dc5405\",\n  \"hex\"\n));\nconst DEV_ADDRESS = \"23a6049381fd2cfb0661d9de206613b83d53d7df\";\n\ndescribe(\"Semux API Test\", () => {\n\n  const config = new Configuration({\n    username: \"user\",\n    password: \"pass\",\n    basePath: \"http://localhost:5171/v2.0.0\"\n  });\n\n  const api = new API.SemuxApi(config);\n\n  it(\"GET /info\", async () => {\n    const response = await api.getInfo();\n    chai.assert.isTrue(response.success)\n  });\n\n  it(\"PUT /whitelist\", async () => {\n    const response = await api.addToWhitelist(\"1.2.3.4\");\n    chai.assert.isTrue(response.success)\n  });\n\n  it(\"GET /accounts\", async () => {\n    const response = await api.listAccounts();\n    chai.assert.isTrue(response.success)\n    chai.assert.deepEqual(response.result, [\n      \"0x2df87e6d8bc749574af35a65cf8d4a69844495ed\",\n      `0x${DEV_ADDRESS}`\n    ]);\n  });\n\n  it(\"GET /account\", async() => {\n    const response = await api.getAccount(DEV_ADDRESS);\n  })\n\n  it(\"POST /transaction/raw\", async () => {\n    const tx = new Transaction(\n      Network.DEVNET,\n      TransactionType.TRANSFER,\n      Buffer.from(DEV_ADDRESS, \"hex\"),\n      Long.fromString(\"1234567890\"),\n      Long.fromString(\"5000000\"),\n      Long.fromNumber(0),\n      Long.fromNumber(1524202700244),\n      Buffer.from(\"POST /transaction/raw\", \"utf-8\")\n    );\n\n    tx.sign(DEV_KEY);\n\n    const response = await api.broadcastRawTransaction(Buffer.from(tx.toBytes().buffer).toString(\"hex\"));\n\n    chai.assert.isTrue(response.success);\n\n    const responsePendingTxs = await api.getPendingTransactions();\n    const pendingTxs : API.TransactionType[] = [{\n      \"blockNumber\": \"null\",\n      \"hash\": \"0x96d4b9a2689254583daa66f83eb39b0cb75d8d0d5e66cb4c0a87cc08e3f1e549\",\n      \"type\": \"TRANSFER\",\n      \"from\": `0x${DEV_ADDRESS}`,\n      \"to\": `0x${DEV_ADDRESS}`,\n      \"value\": \"1234567890\",\n      \"fee\": \"5000000\",\n      \"nonce\": \"0\",\n      \"timestamp\": \"1524202700244\",\n      \"data\": \"0x504f5354202f7472616e73616374696f6e2f726177\"\n    }];\n    chai.assert.isTrue(responsePendingTxs.success);\n    chai.assert.deepEqual(responsePendingTxs.result, pendingTxs);\n  });\n\n});\n"],"names":["API.SemuxApi","chai","Long"],"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"}